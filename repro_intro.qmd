# Introduction to reproducibility

We are at a stage where the analysis is done. Converting our scripts into Rmds
was quite easy to justify, because writing the Rmds is also writing the report
that we need to send to our boss (or our research paper, etc). But it might be
harder to justify to write further document the analysis, or package the
functions we’ve had to write for reuse later and otherwise ensure that the
analysis is and stays reproducible. So we are going to start with the least best
solution to the reproducibility issue, which is recording the versions of the
packages that were used. This is quite easy and quick to do and provides at
least some hope that the analysis will stay reproducible. But this will not do
anything to make the analysis more easily re-usable, will not improve the
documentation, nor ensure that what we wrote is actually correct. For this, we
would need to write tests, which are missing from our current analysis. We only
wrote on test, making sure that all the communes were accounted for.

So I hope that I made my pont clear: it is not recommended to stop at this stage,
but I also recognizes that we live in the real world with real physical constraints.
So let’s see what the `{renv}` can do for us.

## Recording packages’ version with `{renv}`

- renv freezes packages, but not R versions
- difficulty to install packages with renv happens


## Rerunning old analyses where no renv.lock file is available

- groundhog
- rang

## Conclusion
