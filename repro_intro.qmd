# Introduction to reproducibility

We are at a stage where the analysis is done. Converting our scripts into Rmds
was quite easy to justify because writing the Rmds is also writing the report
that we need to send to our boss (or our research paper, etc). But it might be
harder to justify writing further documentation, or package the functions we’ve
had to write for reuse later and otherwise ensure that the analysis is and stays
reproducible. So we are going to start with the least best solution to the
reproducibility issue, which is recording the versions of the packages that were
used. This is quite easy and quick to do and provides at least some hope that
the analysis will stay reproducible. But this will not do anything to make the
analysis more easily re-usable, will not improve the documentation, nor ensure
that what we wrote is indeed correct. For this, we would need to write tests,
which are missing from our current analysis. We only wrote one test, making sure
that all the communes were accounted for. This is why going with a package (and
I need to stress here that the goal of making this package is not to have it on
CRAN) is so useful: packages offer us a great framework for documenting, testing
and sharing our code (even if only sharing internally in your company/team, or
even just future you). Also, at this stage, your analysis is much closer to
being a package than you think. As you shall see in the next chapter, going from
our Rmds to a fully functioning package is much easier than you expect, even if
you’ve never written a package in your life.

So I hope that I made my point clear: it is not recommended to stop at this
stage, but I also recognize that we live in the real world with real physical
constraints. So because we live in this imperfect world, sometimes we need to
deliver imperfect work. So let’s see what we can do that is very cheap in terms
of effort and time, but still allow us to have some hope of having our analysis
reproducible using the `{renv}` package.

## Recording packages’ version with `{renv}`

So now that you’ve used functional and literate programming, we need to start thinking
about the infrastructure surrounding our code. By infrastructure I mean:

- the R version;
- the packages used for the analysis;
- and otherwise the whole computational environment, even the computer hardware itself.

`{renv}` is a package that takes core of point number 2: it allows you to easily
record the packages that were used for an analysis. This record is a file,
called `renv.lock` which will appear at the root of your project once you’ve set
up `{renv}` and executed it. You can use `{renv}` once you’re done with an
analysis like in our case, or better yet, immediately at the start, as soon as
you listed some packages. You can keep updating the `renv.lock` file as you add
or remove packages from your analysis. The `renv.lock` file can then be used to
restore the exact same package library that was used for your analysis on
another computer, or on the same computer but in the future.

This works because `{renv}` does more than simply creating a list of the used
packages and saving it inside the `renv.lock` file: it actually creates a
per-project library (remember, the *library* is the set of packages installed on
your computer) that is completely isolated for the main, default, R library on
your machine, but also from the other `{renv}` libraries that you might have set
up for your other projects. To save time when setting up an `{renv}` library,
packages simply get copied over instead of re-downloaded and re-installed (if
the required packages are already installed in your default library).

To get started, install the `{renv}` package:

```{r, eval = F}
install.packages("renv")
```

and then go to the folder containing the Rmds we wrote together in the previous chapter. 
Make sure that you have the two following files in that folder:

- `save_data.Rmd`, the script that downloads and prepares the data;
- `analyse_data.Rmd`, the script that analyses the data.

Also, make sure that the changes are correctly backed up on Github.com, so if
you haven’t already, commit and push any change.

Once this is done, start an R session, and simply type the following in a console:

```{r, eval = F}
renv::init()
```

You should see the following:

```{r, eval = F}
* Initializing project ...
* Discovering package dependencies ... Done!
* Copying packages into the cache ... [76/76] Done!
The following package(s) will be updated in the lockfile:

# CRAN ===============================
***and then a long list of packages***

The version of R recorded in the lockfile will be updated:
- R              [*] -> [4.2.2]

* Lockfile written to 'path/to/housing/renv.lock'.
* Project 'path/to/housing' loaded. [renv 0.16.0]
* renv activated -- please restart the R session.
```

Let’s take a look at the files that were created (if you prefer using your file browser, feel
free to do so, but I prefer the command line):

```
owner@localhost ➤ ls -la
```

```
total 1070
drwxr-xr-x 1 LLP685 Domain Users     0 Feb 27 12:44 .
drwxr-xr-x 1 LLP685 Domain Users     0 Feb 27 12:35 ..
-rw-r--r-- 1 LLP685 Domain Users    27 Feb 27 12:44 .Rprofile
drwxr-xr-x 1 LLP685 Domain Users     0 Feb 27 12:40 .git
-rw-r--r-- 1 LLP685 Domain Users   306 Feb 27 12:35 README.md
-rw-r--r-- 1 LLP685 Domain Users  2398 Feb 27 12:38 analyse_data.Rmd
drwxr-xr-x 1 LLP685 Domain Users     0 Feb 27 12:44 renv
-rw-r--r-- 1 LLP685 Domain Users 20502 Feb 27 12:44 renv.lock
-rw-r--r-- 1 LLP685 Domain Users  6378 Feb 27 12:38 save_data.Rmd
```

As you can see, there are two new files and one folder. The files are the
`renv.lock` file that I mentioned before and a file called `.Rprofile`. The folder is
simply called `renv`. The `renv.lock` is the file that lists all the packages used for 
the analysis. `.Rprofile` files are files that get read by R automatically at startup.
You should have a system-wide one that gets read by default startups of R, but if R
discovers an `.Rprofile` file in the directory it starts on, then that file gets read
instead. Let’s see the contents of this file (you can open this file in any text editor, like
Notepad on Windows, but then again I prefer the command line):

```
cat .Rprofile
```

```
source("renv/activate.R")
```

This file runs a script on startup called `activate.R`, which you can find in
the `renv` folder. Let’s take a look at the contents of this folder:

```
ls renv
```

```
activate.R  library  settings.dcf
```

So inside the `renv` folder, there is another folder called `library`: this is
the folder that contains our isolated library for just this project.
`activate.R` is the script that tells R to use the packages from the `library`
folder at startup. The other file, `settings.dcf` contains general settings for
`{renv}` which you can safely ignore.

Let’s start a fresh R session in our project’s directory; you should see the
following startup message:

```{r, eval = F}
* Project 'path/to/housing' loaded. [renv 0.16.0]
```

This means that this R session will use the packages installed in the isolated library
we’ve just created. Let’s now take a look at the `renv.lock` file:

```
cat renv.lock
```

```
{
  "R": {
    "Version": "4.2.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://packagemanager.rstudio.com/all/latest"
      }
    ]
  },
  "Packages": {
    "MASS": {
      "Package": "MASS",
      "Version": "7.3-58.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "762e1804143a332333c054759f89a706",
      "Requirements": []
    },
    "Matrix": {
      "Package": "Matrix",
      "Version": "1.5-1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "539dc0c0c05636812f1080f473d2c177",
      "Requirements": [
        "lattice"
      ]

      ***and many more packages***
```

The `renv.lock` file is a json file listing all the packages, as well as their
dependencies that are used for the project, but it started by stating the R
version that was used when it was generated. It is important to remember that
when you’ll use `{renv}` to restore a project’s library on a new machine, the R
version will not be restored: so you will be running these old packages on a
newer version of R, which may in sometimes by a problem (but we’re going to
discuss this later).

So... that’s it. You’ve generated the `renv.lock` file, which means that future
you, or someone else can restore the library that you used to write this
analysis. All that’s required is for that person (or future you) to install
`{renv}` and then use the `renv.lock` file that you generated to restore the
library. Let’s see how this works by cloning the following Github repository on
this
[link](https://github.com/b-rodrigues/targets-minimal)[^https://is.gd/jMVfCu]
(forked from this one
[here](https://github.com/wlandau/targets-minimal)[^https://is.gd/AAnByB]):

```
git clone git@github.com:b-rodrigues/targets-minimal.git
```

You should see a `targets-minimal` folder on your computer now. Start an R session
in that folder and type the following command:

```{r, eval = F}
renv::restore()
```

You should be prompted to activate the project before restoring:

```{r, eval = F}
This project has not yet been activated.
Activating this project will ensure the project library is used during restore.
Please see `?renv::activate` for more details.

Would you like to activate this project before restore? [Y/n]: 
```

Type `Y` and you should see a list of packages that need to be installed. You’ll
get asked once more if you want to proceed, type `y` and watch as the packages
get installed. If you pay attention to the links, you should see that many of
them get pulled from the CRAN archive, for example:

```
Retrieving 'https://cloud.r-project.org/src/contrib/Archive/vroom/vroom_1.5.5.tar.gz' ...
```

Notice the word "Archive" in the url? That’s because this project uses `{vroom}`
1.5.5, but as of writing (early 2023), `{vroom}` is at version 1.6.1.

Now, maybe you’ve run `renv::restore()`, but installation of the packages failed.
If that’s the case, let me explain what likely happened.

I tried restoring the project’s library on two different machines: a Windows
laptop and a Linux workstation. `renv::restore()` failed on the Windows laptop,
but succeeded on the Linux workstation.

Why does that happen? Well in the case of the Windows laptop, compilation of the
`{dplyr}` package failed. This is likely due to the fact that my Windows laptop does
not have the right version of Rtools installed. If you look inside the `renv.lock`
file that came with the `targets-minimal` project, you should notice that the recorded
R version is 4.1.0, but I’m running R 4.2.2 on my laptop. So libraries get compiled
using Rtools 4.2 and not Rtools 4.0 (which include the libraries for R 4.1 as well).

So in order to run this project successfully, I should install the right version
of R and Rtools, and this is usually not so difficult, especially on Windows.
But that might be a problem on other operating systems. Does that mean that
`{renv}` is useless? No, not at all.

At a minimum, `{renv}` ensures that a project’s library doesn’t interfere with
another project’s library. This is especially useful if you’re working on a
project for some time (say, several months at least) and want to make sure that
you can keep working on other projects in parallel. That’s because what often
happens is that you update your packages to use that sweet new feature from some
package but when you go back to your long-term project and try to run, it, ’lo
and behold it doesn’t work anymore. This is because another function coming from
some other package you use in your long-term project got removed, or renamed, or
simple works differently due to the update. In this scenario, you wouldn’t be 
troubled by trying to restore the project, since you’re simply using `{renv}` to
isolate the project’s library (but even if you had to restore the library, that
would work since you’re using the same R version).

But also, apart from that already quite useful feature, `renv.lock` files
provide a very useful blueprint for Docker, which we are going to explore in a
future chapter. Only to give you a little taste of what’s coming: since the
`renv.lock` file lists the R version that was used to record the packages, we
can start from a Docker image that contains the right version of R. From there,
restoring the project using `renv::restore()` should succeed without isssues. If
you have no idea what this all means, do not worry, you will know by the end of
the book, so hang in there.

So should you use `{renv}`? I see two scenarios where it makes sense:

- You’re done with the project and simply want to keep a record of the packages used. Simply call `renv::init()` at the end of the project and commit and push the `renv.lock` file on Github.
- You want to use `{renv}` from the start to isolate the project’s library from your whole R installation’s library to avoid any interference (I would advise you do it like this).

In the next section, we’ll quickly review how to use `{renv}` on a "daily basis".

## Daily `{renv}` usage

So let’s say that you start a new project and want to use `{renv}` right from the start.

## Collaborating with `{renv}`


## renv shortcomings
- renv freezes packages, but not R versions
- difficulty to install packages with renv happens


## Rerunning old analyses where no renv.lock file is available

- groundhog
- rang

## Conclusion
