# Preface {.unnumbered}

In the summer of 2022, a former colleague from my first job asked me if I wanted to
help him teach a class at the University of Luxembourg. It was a class for the
Master's of Data Science, and the class was supposed to be taught by non-academics
like us. The idea was to teach the students some "real-world" skills from the
industry. So we had 40 hours to teach our class, and naturally split them equally
among us; my colleague focused on time series statistics and I really didn't know
what I should do. I knew I wanted to teach, I always liked teaching, but I am a
public servant in the ministry of higher education and research in Luxembourg. I
still code a lot, but I don't do exciting machine learning anymore, or advanced
econometrics like my colleague.

But my colleague told me "you have so much stuff on your blog, for sure you're going
to find something to teach them".

By that point I had been blogging for about 10 years. Most of my blog posts is me trying
to lay out a problem I had at work and how I solved it. Sometimes I do some things
for pleasure or curiosity, like the 
[two posts on the video game nethack](https://www.brodrigues.co/blog/2018-11-03-nethack_analysis/), or the ones 
[on 19th century newspapers](https://www.brodrigues.co/blog/2019-01-04-newspapers/)
where I learnt a lot about NLP.

I could simply teach them about the R programming language; but they probably were at
least already familiar with it, so there was no point in doing it. Maybe focus on
something like the `{tidyverse}` family of packages?

But then, somehow, I don't remember how, it became clear what I had to teach them.
What things don't get taught in school that everybody needs? Software engineering
skills. That's because software engineering skills get taught to software engineers.
But while statisticians, data scientists, or whatever we get called these days, are
not software engineers, they do write a lot of code. And code that is quite important
at that. And yet, most of us do work like pigs (no disrespect to pigs).

How much code do you write that produces very sensitive and important results, be it
in science or in industry, is thoroughly tested? How much code do you use that relies
on a single person showing up for work and using some secret knowledge that is
documented nowhere? What if that person ends up under a bus? How much code do you run
that no one dares touch anymore because that one person from before did end up under
a bus? How many moving pieces are there in this code base that your business or your
research relies on? Do you manage all the risks there are to manage? Are you even
aware of the risks? Are you able to tell anyone, *exactly*, how that number that gets
used by the CEO in that one report was made? What if there's an investigation, or
some external audit? Would the auditors be able to run the code and understand what
is going on with as little intervention as possible (ideally none) from you? *But I
don't work in an industry that gets audited*, you may think. Well, maybe not, or
maybe one day your work will get audited anyways. Maybe it'll get audited internally
for whatever reason. Maybe there's a new law that went into force that requires your
work, or parts of your work, to be easily traceable.

And if you're a scientist, your work do gets audited, or at least it should be in theory.
I don't know any scientist (and I know more scientists than the average person, thanks
to my background and current job) that is against the idea of open science, open data,
reproducibility, and so one. Not one.

